package com.audit_management_app.auditmanagement_DAM.rest.services;

import com.audit_management_app.auditmanagement_DAM.domain.projects.Vulnerability;
import com.audit_management_app.auditmanagement_DAM.domain.services.IVulnerabilityService;
import com.audit_management_app.auditmanagement_DAM.dto.VulnerabilityDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/rest/app/vulnerabilities")
public class VulnerabilityRestServices {

    @Autowired
    private IVulnerabilityService vulnerabilityService;

    @PostMapping
    public VulnerabilityDTO addVulnerability(@RequestBody VulnerabilityDTO vulnerabilityDTO) {
        Vulnerability vulnerability = vulnerabilityService.addVulnerability(
                vulnerabilityDTO.getProjectId(),
                vulnerabilityDTO.getDescription(),
                vulnerabilityDTO.getSeverity(),
                vulnerabilityDTO.getStatus(),
                vulnerabilityDTO.getReportId()
        );
        return convertToDTO(vulnerability);
    }

    @GetMapping("/project/{projectId}")
    public List<VulnerabilityDTO> getVulnerabilitiesByProject(@PathVariable Integer projectId) {
        return vulnerabilityService.getVulnerabilitiesByProject(projectId).stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    @GetMapping("/project/{projectId}/severity/{severity}")
    public List<VulnerabilityDTO> getVulnerabilitiesByProjectAndSeverity(
            @PathVariable Integer projectId,
            @PathVariable Vulnerability.Severity severity) {
        return vulnerabilityService.getVulnerabilitiesByProjectAndSeverity(projectId, severity).stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    @GetMapping("/project/{projectId}/status/{status}")
    public List<VulnerabilityDTO> getVulnerabilitiesByProjectAndStatus(
            @PathVariable Integer projectId,
            @PathVariable Vulnerability.Status status) {
        return vulnerabilityService.getVulnerabilitiesByProjectAndStatus(projectId, status).stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    @GetMapping("/report/{reportId}")
    public List<VulnerabilityDTO> getVulnerabilitiesByReport(@PathVariable Integer reportId) {
        return vulnerabilityService.getVulnerabilitiesByReport(reportId).stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    @PutMapping("/{vulnerabilityId}/status/{status}")
    public String updateVulnerabilityStatus(
            @PathVariable Integer vulnerabilityId,
            @PathVariable Vulnerability.Status status) {
        vulnerabilityService.updateVulnerabilityStatus(vulnerabilityId, status);
        return "Vulnerability status updated successfully.";
    }

    @DeleteMapping("/{vulnerabilityId}")
    public String deleteVulnerability(@PathVariable Integer vulnerabilityId) {
        vulnerabilityService.deleteVulnerability(vulnerabilityId);
        return "Vulnerability deleted successfully.";
    }
    @GetMapping
    public List<VulnerabilityDTO> getAllVulnerabilities() {
        return vulnerabilityService.getAllVulnerabilities().stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }
    // Helper methods for conversion
    private VulnerabilityDTO convertToDTO(Vulnerability vulnerability) {
        VulnerabilityDTO dto = new VulnerabilityDTO();
        dto.setVulnerabilityId(vulnerability.getVulnerabilityId());
        dto.setProjectId(vulnerability.getProject().getProjectId());
        dto.setDescription(vulnerability.getDescription());
        dto.setSeverity(vulnerability.getSeverity());
        dto.setStatus(vulnerability.getStatus());
        if (vulnerability.getReport() != null) {
            dto.setReportId(vulnerability.getReport().getReportId());
        }
        return dto;
    }
}