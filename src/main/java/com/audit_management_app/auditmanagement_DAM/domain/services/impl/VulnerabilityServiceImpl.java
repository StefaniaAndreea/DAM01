package com.audit_management_app.auditmanagement_DAM.domain.services.impl;

import com.audit_management_app.auditmanagement_DAM.domain.projects.AuditReport;
import com.audit_management_app.auditmanagement_DAM.domain.projects.Project;
import com.audit_management_app.auditmanagement_DAM.domain.projects.Vulnerability;
import com.audit_management_app.auditmanagement_DAM.domain.services.IAuditReportRepository;
import com.audit_management_app.auditmanagement_DAM.domain.services.IProjectRepository;
import com.audit_management_app.auditmanagement_DAM.domain.services.IVulnerabilityService;
import com.audit_management_app.auditmanagement_DAM.domain.services.IVulnerabilityRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class VulnerabilityServiceImpl implements IVulnerabilityService {
    @Autowired
    private IVulnerabilityRepository vulnerabilityRepository;

    @Autowired
    private IProjectRepository projectRepository;

    @Autowired
    private IAuditReportRepository auditReportRepository;

    @Override
    public Vulnerability addVulnerability(Integer projectId, String description, Vulnerability.Severity severity, Vulnerability.Status status, Integer reportId) {
        Project project = projectRepository.findById(projectId)
                .orElseThrow(() -> new IllegalArgumentException("Project with ID " + projectId + " does not exist."));

        AuditReport report = null;
        if (reportId != null) {
            report = auditReportRepository.findById(reportId)
                    .orElseThrow(() -> new IllegalArgumentException("Report with ID " + reportId + " does not exist."));
        }

        Vulnerability vulnerability = new Vulnerability();
        vulnerability.setProject(project);
        vulnerability.setDescription(description);
        vulnerability.setSeverity(severity);
        vulnerability.setStatus(status);
        vulnerability.setReport(report);

        if (report != null) {
            // Adăugăm vulnerabilitatea în lista raportului
            report.getVulnerabilities().add(vulnerability);
            return auditReportRepository.save(report).getVulnerabilities()
                    .stream()
                    .filter(v -> v.getDescription().equals(description) && v.getSeverity() == severity)
                    .findFirst()
                    .orElseThrow(() -> new IllegalStateException("Failed to save vulnerability."));
        }

        // Salvează direct vulnerabilitatea dacă nu este asociată cu un raport
        return vulnerabilityRepository.save(vulnerability);
    }

    @Override
    public List<Vulnerability> getVulnerabilitiesByProject(Integer projectId) {
        return vulnerabilityRepository.findByProjectId(projectId);
    }

    @Override
    public List<Vulnerability> getVulnerabilitiesByProjectAndSeverity(Integer projectId, Vulnerability.Severity severity) {
        return vulnerabilityRepository.findByProjectIdAndSeverity(projectId, severity);
    }

    @Override
    public List<Vulnerability> getVulnerabilitiesByProjectAndStatus(Integer projectId, Vulnerability.Status status) {
        return vulnerabilityRepository.findByProjectIdAndStatus(projectId, status);
    }

    @Override
    public List<Vulnerability> getVulnerabilitiesByReport(Integer reportId) {
        return vulnerabilityRepository.findByReportId(reportId);
    }

    @Override
    public void updateVulnerabilityStatus(Integer vulnerabilityId, Vulnerability.Status status) {
        Vulnerability vulnerability = vulnerabilityRepository.findById(vulnerabilityId)
                .orElseThrow(() -> new IllegalArgumentException("Vulnerability with ID " + vulnerabilityId + " does not exist."));

        vulnerability.setStatus(status);
        vulnerabilityRepository.save(vulnerability);
    }

    @Override
    public void deleteVulnerability(Integer vulnerabilityId) {
        Vulnerability vulnerability = vulnerabilityRepository.findById(vulnerabilityId)
                .orElseThrow(() -> new IllegalArgumentException("Vulnerability with ID " + vulnerabilityId + " does not exist."));

        AuditReport report = vulnerability.getReport();
        if (report != null) {
            // Eliminăm vulnerabilitatea din lista raportului
            report.getVulnerabilities().remove(vulnerability);
            auditReportRepository.save(report);
        }

        vulnerabilityRepository.delete(vulnerability);
    }
    @Override
    public List<Vulnerability> getAllVulnerabilities() {
        return vulnerabilityRepository.findAll();
    }
}
