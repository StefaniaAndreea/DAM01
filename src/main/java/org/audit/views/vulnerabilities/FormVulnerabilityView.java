package org.audit.views.vulnerabilities;

import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.html.H1;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.router.BeforeEvent;
import com.vaadin.flow.router.HasUrlParameter;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;
import org.audit.dto.Severity;
import org.audit.dto.Status;
import org.audit.dto.VulnerabilityDTO;
import org.audit.services.IVulnerabilityService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component
@Scope("prototype")
@Route("vulnerabilities/form")
@PageTitle("Add Vulnerability")
public class FormVulnerabilityView extends VerticalLayout implements HasUrlParameter<String> {

    private final IVulnerabilityService vulnerabilityService;

    private Integer reportId;
    private Integer projectId;

    private final TextField descriptionField = new TextField("Description");
    private final ComboBox<Severity> severityField = new ComboBox<>("Severity");
    private final ComboBox<Status> statusField = new ComboBox<>("Status");

    @Autowired
    public FormVulnerabilityView(IVulnerabilityService vulnerabilityService) {
        this.vulnerabilityService = vulnerabilityService;
        severityField.setItems(Severity.values());
        statusField.setItems(Status.values());
    }

    @Override
    public void setParameter(BeforeEvent event, String parameter) {
        String[] ids = parameter.split("-");
        this.reportId = Integer.parseInt(ids[0]);
        this.projectId = Integer.parseInt(ids[1]);

        initializeForm();
    }

    private void initializeForm() {
        removeAll(); // Clear layout

        // Title
        add(new H1("Add Vulnerability for Report " + reportId + " - Project " + projectId));

        // Form layout
        FormLayout formLayout = new FormLayout();
        formLayout.add(descriptionField, severityField, statusField);

        // Save button
        Button saveButton = new Button("Save", e -> saveVulnerability());
        saveButton.getStyle().set("margin-top", "20px");

        add(formLayout, saveButton);
    }

    private void saveVulnerability() {
        if (descriptionField.isEmpty() || severityField.isEmpty() || statusField.isEmpty()) {
            Notification.show("All fields are required.", 3000, Notification.Position.TOP_CENTER);
            return;
        }

        try {
            VulnerabilityDTO newVulnerability = new VulnerabilityDTO();
            newVulnerability.setDescription(descriptionField.getValue());
            newVulnerability.setSeverity(severityField.getValue());
            newVulnerability.setStatus(statusField.getValue());
            newVulnerability.setReportId(reportId);
            newVulnerability.setProjectId(projectId);

            vulnerabilityService.addVulnerability(newVulnerability);

            Notification.show("Vulnerability added successfully!", 3000, Notification.Position.TOP_CENTER);
            getUI().ifPresent(ui -> ui.navigate("vulnerabilities/report/" + reportId + "-" + projectId));
        } catch (Exception e) {
            Notification.show("Failed to add vulnerability: " + e.getMessage(), 5000, Notification.Position.TOP_CENTER);
        }
    }
}
